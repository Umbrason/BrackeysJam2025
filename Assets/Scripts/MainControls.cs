//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/MainControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainControls"",
    ""maps"": [
        {
            ""name"": ""MouseControl"",
            ""id"": ""0acf5ac4-082f-4d82-95f4-e3db44d42cdb"",
            ""actions"": [
                {
                    ""name"": ""MoveClick"",
                    ""type"": ""Button"",
                    ""id"": ""f4254ee1-2d19-4139-8a89-e7e964b222b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3ef57295-0e36-48b3-8cf8-b0c752b444f6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3cd8122f-2dac-4292-8d3a-b9f258c54ef2"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MouseControl
        m_MouseControl = asset.FindActionMap("MouseControl", throwIfNotFound: true);
        m_MouseControl_MoveClick = m_MouseControl.FindAction("MoveClick", throwIfNotFound: true);
    }

    ~@MainControls()
    {
        UnityEngine.Debug.Assert(!m_MouseControl.enabled, "This will cause a leak and performance issues, MainControls.MouseControl.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseControl
    private readonly InputActionMap m_MouseControl;
    private List<IMouseControlActions> m_MouseControlActionsCallbackInterfaces = new List<IMouseControlActions>();
    private readonly InputAction m_MouseControl_MoveClick;
    public struct MouseControlActions
    {
        private @MainControls m_Wrapper;
        public MouseControlActions(@MainControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveClick => m_Wrapper.m_MouseControl_MoveClick;
        public InputActionMap Get() { return m_Wrapper.m_MouseControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseControlActions set) { return set.Get(); }
        public void AddCallbacks(IMouseControlActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseControlActionsCallbackInterfaces.Add(instance);
            @MoveClick.started += instance.OnMoveClick;
            @MoveClick.performed += instance.OnMoveClick;
            @MoveClick.canceled += instance.OnMoveClick;
        }

        private void UnregisterCallbacks(IMouseControlActions instance)
        {
            @MoveClick.started -= instance.OnMoveClick;
            @MoveClick.performed -= instance.OnMoveClick;
            @MoveClick.canceled -= instance.OnMoveClick;
        }

        public void RemoveCallbacks(IMouseControlActions instance)
        {
            if (m_Wrapper.m_MouseControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseControlActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseControlActions @MouseControl => new MouseControlActions(this);
    public interface IMouseControlActions
    {
        void OnMoveClick(InputAction.CallbackContext context);
    }
}
